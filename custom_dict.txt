A
dynamic
global
network
infrastructure
with
self-configuring
capabilities
based
on
standard
and
interoperable
communication
protocols
where
physical
and
virtual
things
have
identities
physical
attributes
and
virtual
personalities
and
use
intelligent
interfaces
and
are
seamlessly
integrated
into
the
information
network
often
communicate
data
associated
with
users
and
their
environments
Characteristics
of
IoT
Dynamic
Self-Adapting
IoT
devices
and
systems
may
have
the
capability
to
dynamically
adapt
with
the
changing
contexts
and
take
actions
based
on
their
operating
conditions
user's
context
or
sensed
environment
For
example
consider
a
surveillance
system
comprising
of
a
number
of
surveillance
cameras
The
surveillance
cameras
can
adapt
their
modes
to
normal
or
infra-red
night
modes
based
on
whether
it
is
day
or
night
Cameras
could
switch
from
lower
resolution
to
higher
resolution
modes
when
any
motion
is
detected
and
alert
nearby
cameras
to
do
the
same
In
this
example
the
surveillance
system
is
adapting
itself
based
on
the
context
and
changing
e.g.
dynamic
conditions.

Self-Configuring
IoT
devices
may
have
self-configuring
capability
allowing
a
large
number
of
devices
to
work
together
to
provide
certain
functionality
(such
as
weather
monitoring
These
devices
have
the
ability
configure
themselves
in
association
with
the
IoT
infrastructure
setup
the
networking
and
fetch
latest
software
upgrades
with
minimal
manual
or
user
intervention
Interoperable
Communication
Protocol
IoT
devices
may
support
a
number
of
interoperable
communication
protocols
and
can
communicate
with
other
devices
and
also
with
the
infrastructure
We
describe
some
of
the
commonly
used
communication
protocols
and
models
in
later
sections
Unique
Identity
Each
IoT
device
has
a
unique
identity
and
a
unique
identifier
(such
as
an
IP
address
or
a
Uniform
Resource
Identifier
IoT
iot
systems
may
have
intelligent
interfaces
which
adapt
based
on
the
context
allow
communicating
with
users
and
the
environmental
contexts
IoT
device
interfaces
allow
users
to
query
the
devices
monitor
their
status
and
control
them
remotely
in
association
with
the
control
configuration
and
management
infrastructure
Integrated
into
Information
Network:
IoT
devices
are
usually
integrated
into
the
information
network
that
allows
them
to
communicate
and
exchange
data
with
other
devices
and
systems.
IoT
devices
can
be
dynamically
discovered
in
the
network
by
other
devices
and/or
the
network
and
have
the
capability
to
describe
themselves
(and
their
characteristics
to
other
devices
or
user
applications,
For
example,
a
weather
monitoring
node
can
describe
its
monitoring
capabilities
to
another
connected
node
so
that
they
can
communicate
and
exchange
data.
Integration
into
the
information
network
helps
in
making
IoT
systems
smarter
due
to
the
collective
intelligence
of
the
individual
devices
in
collaboration
with
the
infrastructure
infrastructure
Thus
the
data
from
a
large
number
of
connected
weather
monitoring
IoT
nodes
can
be
aggregated
and
analysed
to
predict
the
weather.
Q1B
The
main
tasks
of
this
framework
are
to
analyse
and
determine
the
smart
activities
of
these
intelligent
devices
through
maintaining
a
dynamic
interconnection
among
those
devices.
The
proposed
framework
will
help
to
standardize
IoT
infrastructure
so
that
it
can
receive
e-services
based
on
context
information
leaving
the
current
infrastructure
unchanged.
The
active
collaboration
of
these
heterogeneous
devices
and
protocols
can
lead
to
future
ambient
computing
where
the
maximum
utilization
of
cloud
computing
will
be
ensured.
This
model
is
capable
of
logical
division
of
physical
devices
placement,
creation
of
virtual
links
among
different
domains,
networks
and
collaborate
among
multiple
application
without
any
central
coordination
system.
IaaS
can
afford
standard
functionalities
to
accommodate
and
provides
access
to
cloud
infrastructure.
The
service
is
generally
offered
by
modern
data
centres
maintained
by
giant
companies
and
organization.
It
is
categorized
as
virtualization
of
resources
which
permits
a
user
to
install
and
run
application
over
virtualization
layer
and
allows
the
system
to
be
distributed,
configurable
and
scalable.
Total
infrastructure
system
can
be
categorized
into
4
layers
to
receive
context
supported
e-services
out
of
raw
data
from
the
Internet
of
Things.
These
4
layers
establish
a
generic
framework
that
does
not
alter
the
current
network
infrastructure
but
create
an
interfacing
among
services
and
entities
through
network
virtualization.
Connectivity
Layer-
This
layer
includes
all
the
physical
devices
involved
in
the
framework
and
the
interconnection
among
them.
Future
internet
largely
depends
on
the
unification
of
these
common
objects
found
everywhere
near
us
and
these
should
be
distinctly
identifiable
and
controllable.
This
layer
also
involves
assigning
of
low
range
networking
devices
like
sensors,
actuators,
RFID
tags
etc
and
resource
management
checks
the
availability
of
physical
resources
of
all
the
devices
and
networks
involved
in
the
underlying
infrastructure.
These
devices
contain
very
limited
resources
and
resource
management
ensures
the
maximum
utilization
with
little
overhead.
It
also
allows
sharing
and
distribution
of
information
among
multiple
networks
or
single
network
divided
into
multiple
domains.
Access
Layer-
Context
Data
will
be
reached
to
internet
via
IoT
Gateway
as
captured
by
short
range
devices
in
form
of
raw
data.
Access
layer
comprises
topology
definition,
network
initiation,
creation
of
domains
etc.
This
layer
also
includes
connection
setup,
intra-inter
domain
communication,
scheduling,
packet
transmissions
between
flow-sensors
and
IoT
gateway.
The
simulation
was
run
later
in
this
paper
for
different
scenario
based
on
this
layer.
Feature
management
contains
a
feature
filter
which
accepts
only
acceptable
context
data
and
redundant
data
are
rejected.
Large
number
of
sensors
maintains
lots
of
features
but
only
a
small
subset
of
features
is
useful
generate
a
context
data.
Feature
filter
helps
to
reduce
irrelevant
data
transmission,
increases
the
data
transfer
rate
of
useful
data
and
reduce
energy
and
CPU
consumption
too.
Number
of
features
can
be
different
based
on
the
application
requirements
and
context
data
types.
Abstraction
Layer-
One
of
the
most
important
characteristics
of
OpenFlow
is
to
add
virtual
layers
with
the
preset
layers,
leaving
the
established
infrastructure
unchanged.
A
virtual
link
can
be
created
among
different
networks
and
a
common
platform
can
be
developed
for
various
communication
systems.
The
system
is
fully
a
centralized
system
from
physical
layer
viewpoint
but
a
distribution
of
service
(flow
visor
could
be
utilized)
could
be
maintained.
One
central
system
can
monitor,
control
all
sorts
of
traffics.
It
can
help
to
achieve
better
band-width,
reliability,
robust
routing,
etc.
which
will
lead
to
a
better
Quality
of
Services
(QoS).
In
multi-hopping
scenario
packets
are
transferred
via
some
adjacent
nodes.
So,
nodes
near
to
access
points
bears
too
much
load
in
comparison
to
distant
nodes
in
a
downstream
scenario
and
inactivity
of
these
important
nodes
may
cause
the
network
to
be
collapsed.
Virtual
presence
of
sensor
nodes
can
solve
the
problem
where
we
can
create
a
virtual
link
between
two
sensor
networks
through
access
point
negotiation.
So,
we
can
design
a
three
a
three-layer
platform,
where
common
platform
and
virtualization
layer
are
newly
added
with
established
infrastructure.
Sensors
need
not
to
be
worried
about
reach-ability
or
their
placement
even
in
harsh
areas.
Packet
could
be
sent
to
any
nodes
even
if
it
is
sited
on
different
networks.
Service
Layer-
Storage
management
bears
the
idea
about
all
sorts
of
unfamiliar
and/or
important
technologies
and
information
which
can
turn
the
system
scalable
and
efficient.
It
is
not
only
responsible
for
storing
data
but
also
to
provide
security
along
with
it.
It
also
allows
accessing
data
effectively;
integrating
data
to
enhance
service
intelligence,
analysis
based
on
the
services
required
and
most
importantly
increases
the
storage
efficiency.
Storage
and
management
layer
involves
data
storage
&
system
supervision,
software
services
and
business
management
&
operations.
Though
they
are
included
in
one
layer,
the
business
support
system
resides
slightly
above
of
cloud
computing
service
whereas
Open-Flow
is
placed
below
of
it
as
presented
to
include
virtualizations
and
monitor
management.
Service
management
combines
the
required
services
with
organizational
solutions
and
thus
new
generation
user
service
becomes
simplified.
These
forthcoming
services
are
necessitated
to
be
co
interrelated
and
combined
in
order
to
meet
the
demand
socio-
economic
factors
such
as
environment
analysis,
safety
measurement,
climate
management,
agriculture
modernization
etc.
Q1C
1.1
Smart
Objects:
A
Definition
Historically,
the
definition
of
a
smart
object
has
been
a
bit
nebulous
because
of
the
different
interpretations
of
the
term
by
varying
sources.
To
add
to
the
overall
confusion,
the
term
smart
object,
despite
some
semantic
differences,
is
often
used
interchangeably
with
terms
such
as
smart
sensor,
smart
device,
IoT
device,
intelligent
device,
thing,
smart
thing,
intelligent
node,
intelligent
thing,
ubiquitous
thing,
and
intelligent
product.
In
order
to
clarify
some
of
this
confusion,
we
provide
here
the
definition
of
smart
object
as
we
use
it
in
this
book.
A
smart
object,
as
described
throughout
this
book,
is
a
device
that
has,
at
a
minimum,
the
following
four
defining
characteristics
Processing
unit:
A
smart
object
has
some
type
of
processing
unit
for
acquiring
data,
processing
and
analysing
sensing
information
received
by
the
sensor(s),
coordinating
control
signals
to
any
actuators,
and
controlling
a
variety
of
functions
on
the
smart
object,
including
the
communication
and
power
systems.
The
specific
type
of
processing
unit
that
is
used
can
vary
greatly,
depending
on
the
specific
processing
needs
of
different
applications.
The
most
common
is
a
microcontroller
because
of
its
small
form
factor,
flexibility,
programming
simplicity,
ubiquity,
low
power
consumption,
and
low
cost.
Sensor(s)
and/or
actuator(s):
A
smart
object
is
capable
of
interacting
with
the
physical
world
through
sensors
and
actuators.
As
described
in
the
previous
sections,
a
sensor
learns
and
measures
its
environment,
whereas
an
actuator
is
able
to
produce
some
change
in
the
physical
world.
A
smart
object
does
not
need
to
contain
both
sensors
and
actuators.
In
fact,
a
smart
object
can
contain
one
or
multiple
sensors
and/or
actuators,
depending
upon
the
application.
Communication
device:
The
communication
unit
is
responsible
for
connecting
a
smart
object
with
other
smart
objects
and
the
outside
world
(via
the
network).
Communication
devices
for
smart
objects
can
be
either
wired
or
wireless.
Overwhelmingly,
in
IoT
networks
smart
objects
are
wirelessly
interconnected
for
a
number
of
reasons,
including
cost,
limited
infrastructure
availability,
and
ease
of
deployment.
There
are
myriad
different
communication
protocols
for
smart
objects.
Power
source:
Smart
objects
have
components
that
need
to
be
powered.
Interestingly,
the
most
significant
power
consumption
usually
comes
from
the
communication
unit
of
a
smart
object.
As
with
the
other
three
smart
object
building
blocks,
the
power
requirements
also
vary
greatly
from
application
to
application.
Typically,
smart
objects
are
limited
in
power,
are
deployed
for
a
very
long
time,
and
are
not
easily
accessible.
This
combination,
especially
when
the
smart
object
relies
on
battery
power,
implies
that
power
efficiency,
judicious
power
management,
sleep
modes,
ultra-low
power
consumption
hardware,
and
so
on
are
critical
design
elements.
For
long-term
deployments
where
smart
objects
are,
for
all
practical
purposes,
inaccessible,
power
is
commonly
obtained
from
scavenger
sources
(solar,
piezoelectric,
and
so
on)
or
is
obtained
in
a
hybridized
manner,
also
tapping
into
infrastructure
power.
Q1D
An
IoT
system
comprises
of
a
number
of
functional
blocks
that
provide
the
system
the
capabilities
for
identification,
sensing,
actuation,
communication,
and
management
as
shown
in
Figure
1.6.
These
functional
blocks
are
described
as
follows:
Device:
An
IoT
system
comprises
of
devices
that
provide
sensing,
actuation,
monitoring
and
control
functions.
Communication:
The
communication
block
handles
the
communication
for
the
IoT
system.
Services:
An
IoT
system
uses
various
types
of
IoT
services
such
as
services
for
device
monitoring,
device
control
services,
data
publishing
services
and
services
for
device
discovery.
Management:
Management
functional
block
provides
various
functions
to
govern
the
IoT
system.
Security:
Security
functional
block
secures
the
IoT
system
and
by
providing
functions
such
as
authentication,
authorization,
message
and
content
integrity,
and
data
security.
Application:
IoT
applications
provide
an
interface
that
the
users
can
use
to
control
and
monitor
various
aspects
of
the
IoT
system.
Applications
also
allow
users
to
view
the
system
status
and
view
or
analyse
the
processed
data.
Q2A
The
Internet
of
Things
(IoT)
Data
Management
Stack
refers
to
the
various
layers
or
components
involved
in
managing
the
massive
volumes
of
data
generated
by
IoT
devices.
It
encompasses
everything
from
data
collection
at
the
device
level
to
processing,
storage,
analysis,
and
visualization.
Here's
a
breakdown
of
the
typical
layers
in
an
IoT
Data
Management
Stack:
Device
Layer:
This
is
where
IoT
devices
reside.
These
can
include
sensors,
actuators,
wearables,
industrial
machines,
and
more.
They
collect
data
from
the
physical
world
and
transmit
it
to
the
next
layer
for
processing.
Devices
may
have
limited
processing
power
and
memory,
so
data
preprocessing
might
occur
at
this
layer
to
reduce
the
volume
of
data
sent
to
higher
layers.
Connectivity
Layer:
The
data
collected
by
IoT
devices
needs
to
be
transmitted
to
a
central
system
for
processing.
The
connectivity
layer
handles
this
task,
which
may
involve
various
communication
protocols
such
as
Wi-Fi,
Bluetooth,
Zigbee,
LoRa,
cellular
networks
(3G,
4G,
5G),
or
even
satellite
communication,
depending
on
the
specific
requirements
of
the
IoT
deployment.
Data
Ingestion
Layer:
Once
the
data
reaches
the
central
system,
it
needs
to
be
ingested
and
stored
in
a
scalable
and
efficient
manner.
The
data
ingestion
layer
performs
this
task,
which
involves
handling
high
data
throughput,
ensuring
data
integrity,
and
supporting
various
data
formats.
This
layer
often
utilizes
technologies
like
Apache
Kafka,
MQTT,
or
custom
APIs
for
data
ingestion.
Data
Storage
Layer:
In
this
layer,
the
ingested
data
is
stored
for
further
processing
and
analysis.
The
choice
of
data
storage
technology
depends
on
factors
such
as
data
volume,
velocity,
variety,
and
access
patterns.
Common
storage
solutions
for
IoT
data
include
relational
databases,
NoSQL
databases
(such
as
MongoDB,
Cassandra),
time-series
databases
(like
InfluxDB),
and
distributed
file
systems
(such
as
Hadoop
HDFS).
Data
Processing
Layer:
Once
the
data
is
stored,
it
needs
to
be
processed
to
extract
insights,
detect
patterns,
and
derive
actionable
information.
The
data
processing
layer
performs
tasks
such
as
real-time
stream
processing,
batch
processing,
data
enrichment,
aggregation,
and
transformation.
Technologies
commonly
used
in
this
layer
include
Apache
Spark,
Apache
Flink,
Apache
Storm,
and
stream
processing
frameworks
like
Kafka
Streams.
Analytics
and
Machine
Learning
Layer:
This
layer
focuses
on
advanced
analytics
and
machine
learning
techniques
to
derive
insights
from
IoT
data.
It
involves
building
and
deploying
models
for
predictive
maintenance,
anomaly
detection,
optimization,
and
other
use
cases.
Technologies
used
here
include
machine
learning
libraries
(such
as
TensorFlow,
PyTorch),
statistical
analysis
tools,
and
custom
analytics
solutions
tailored
to
specific
IoT
applications.
Visualization
and
Presentation
Layer:
The
insights
derived
from
IoT
data
are
often
presented
to
end-users
in
a
human-readable
format
for
decision-making.
This
layer
involves
building
dashboards,
reports,
and
visualization
tools
that
provide
intuitive
interfaces
for
monitoring
IoT
systems,
analyzing
trends,
and
taking
appropriate
actions.
Technologies
used
here
include
dashboarding
platforms
(like
Grafana,
Kibana),
data
visualization
libraries
(such
as
D3.js),
and
custom
UI/UX
design.
By
leveraging
the
IoT
Data
Management
Stack,
organizations
can
effectively
collect,
store,
process,
analyze,
and
visualize
the
vast
amounts
of
data
generated
by
IoT
devices,
enabling
them
to
derive
actionable
insights
and
optimize
business
operations.
Q2B
An
interesting
aspect
of
visualizing
an
IoT
architecture
this
way
is
that
you
can
start
to
organize
responsibilities
along
IT
and
OT
lines.The
bottom
of
the
stack
is
generally
in
the
domain
of
OT.
For
an
industry
like
oil
and
gas,
this
includes
sensors
and
devices
connected
to
pipelines,
oil
rigs,
refinery
machinery,
and
so
on.
The
top
of
the
stack
is
in
the
IT
area
and
includes
things
like
the
servers,
databases,
and
applications,
all
of
which
run
on
a
part
of
the
network
controlled
by
IT.
In
the
past,
OT
and
IT
have
generally
been
very
independent
and
had
little
need
to
even
talk
to
each
other.
IoT
is
changing
that
paradigm.
At
the
bottom,
in
the
OT
layers,
the
devices
generate
real-time
data
at
their
own
rate—
sometimes
vast
amounts
on
a
daily
basis.
Not
only
does
this
result
in
a
huge
amount
of
data
transiting
the
IoT
network,
but
the
sheer
volume
of
data
suggests
that
applications
at
the
top
layer
will
be
able
to
ingest
that
much
data
at
the
rate
required.
To
meet
this
requirement,
data
has
to
be
buffered
or
stored
at
certain
points
within
the
IoT
stack.
Layering
data
management
in
this
way
throughout
the
stack
helps
the
top
four
layers
handle
data
at
their
own
speed.
As
a
result,
the
real-time
“data
in
motion”
close
to
the
edge
has
to
be
organized
and
stored
so
that
it
becomes
“data
at
rest”
for
the
applications
in
the
IT
tiers.
The
IT
and
OT
organizations
need
to
work
together
for
overall
data
management.
Q2C
Most
IoT
sensors
are
designed
for
a
single
job,
and
they
are
typically
small
and
inexpensive.
This
means
they
often
have
limited
power,
CPU,
and
memory,
and
they
transmit
only
when
there
is
something
important.
Because
of
the
massive
scale
of
these
devices
and
the
large,
uncontrolled
environments
where
they
are
usually
deployed,
the
networks
that
provide
connectivity
also
tend
to
be
very
lossy
and
support
very
low
data
rates.
This
is
a
completely
different
situation
from
IT
networks,
which
enjoy
multi-gigabit
connection
speeds
and
endpoints
with
powerful
CPUs.
If
an
IT
network
has
performance
constraints,
the
solution
is
simple:
Upgrade
to
a
faster
network.
If
too
many
devices
are
on
one
VLAN
and
are
impacting
performance,
you
can
simply
carve
out
a
new
VLAN
and
continue
to
scale
as
much
as
you
need.
However,
this
approach
cannot
meet
the
constrained
nature
of
IoT
systems.
IoT
requires
a
new
breed
of
connectivity
technologies
that
meet
both
the
scale
and
constraint
limitations.
For
more
detailed
information
on
constrained
devices
and
networks.
Q2D
It
has
often
been
said
that
if
World
War
III
breaks
out,
it
will
be
fought
in
cyberspace.
We
have
already
seen
evidence
of
targeted
malicious
attacks
using
vulnerabilities
in
networked
machines,
such
as
the
outbreak
of
the
Stuxnet
worm,
which
specifically
affected
Siemens
programmable
logic
controller
(PLC)
systems.
The
frequency
and
impact
of
cyber-attacks
in
recent
years
has
increased
dramatically.
Protecting
corporate
data
from
intrusion
and
theft
is
one
of
the
main
functions
of
the
IT
department.
IT
departments
go
to
great
lengths
to
protect
servers,
applications,
and
the
network,
setting
up
defence
in-depth
models
with
layers
of
security
designed
to
protect
the
cyber
crown
jewels
of
the
corporation.
However,
despite
all
the
efforts
mustered
to
protect
networks
and
data,
hackers
still
find
ways
to
penetrate
trusted
networks.
In
IT
networks,
the
first
line
of
defence
is
often
the
perimeter
firewall.
It
would
be
unthinkable
to
position
critical
IT
endpoints
outside
the
firewall,
visible
to
anyone
who
cared
to
look.
However,
IoT
endpoints
are
often
located
in
wireless
sensor
networks
that
use
unlicensed
spectrum
and
are
not
only
visible
to
the
world
through
a
spectrum
analyser
but
often
physically
accessible
and
widely
distributed
in
the
field.
As
more
OT
systems
become
connected
to
IP
networks,
their
capabilities
increase,
but
so
does
their
potential
vulnerability.
For
example,
at
3:30
p.m.
on
December
23,
2015,
the
Ukrainian
power
grid
experienced
an
unprecedented
cyber-attack
that
affected
approximately
225,000
customers.
This
attack
wasn’t
simply
carried
out
by
a
group
of
opportunistic
thieves;
it
was
a
sophisticated,
well
planned
assault
on
the
Ukrainian
power
grid
that
targeted
the
SCADA
(supervisory
control
and
data
acquisition)
system,
which
governs
communication
to
grid
automation
devices.
Traditional
models
of
IT
security
are
simply
not
designed
for
the
new
attack
vectors
introduced
by
highly
dispersed
IoT
systems.
IoT
systems
require
consistent
mechanisms
of
authentication,
encryption,
and
intrusion
prevention
techniques
that
understand
the
behavior
of
industrial
protocols
and
can
respond
to
attacks
on
critical
infrastructure.
For
optimum
security,
IoT
systems
must:
•
Be
able
to
identify
and
authenticate
all
entities
involved
in
the
IoT
service
(that
is,
gateways,
endpoint
devices,
home
networks,
roaming
networks,
service
platforms)
•
Ensure
that
all
user
data
shared
between
the
endpoint
device
and
back-end
applications
is
encrypted
•
Comply
with
local
data
protection
legislation
so
that
all
data
is
protected
and
stored
correctly
•
Utilize
an
IoT
connectivity
management
platform
and
establish
rules-based
security
policies
so
immediate
action
can
be
taken
if
anomalous
behaviour
is
detected
from
connected
devices
•
Take
a
holistic,
network-level
approach
to
security.
Q3A
Describe
RFID
and
explain
its
application
in
IoT.
Answer:
RFID
system
is
able
to
overcome
most
of
these
difficulties
to
an
extent.
The
RFID
system
consists
of
a
tag
(also
known
as
a
transponder)
attached
to
the
object
being
identified.
The
tag
usually
consists
of
an
integrated
circuit
and
an
antenna.
Another
important
module
in
the
system
is
a
reader.
The
reader
queries
the
tag
using
radio
frequency
(RF)
waves,
and
gets
the
identity
of
the
tag
via
the
RF
waves.
The
RFID
systems
operate
in
various
frequency
bands.
Some
of
the
most
popular
frequencies
are:
•
125
kHz
to
134.2
kHz
(LF:
low
frequency);
•
13.56
MHz
(HF:
high
frequency);
•
860
to
915
MHz
(UHF:
ultra-high
frequency);
and
•
2.45
GHz
to
5.8
GHz
(microwave
frequency).
The
RFID
systems
operating
in
the
LF
band
were
the
first
to
be
deployed
in
the
market
for
high-volume
short-range
industrial
applications
and
car
immobilizer
devices.
These
systems
are
attractive
in
systems
where
the
data
rates
are
not
very
high.
The
HF
RFID
systems
are
capable
of
handling
much
higher
data
rates
compared
to
the
LF
system,
and
the
tag
antenna
is
much
smaller.
HF
systems
have
longer
read
range
compared
to
the
LF
systems.
The
UHF
RFID
system
has
a
much
longer
read
range
and
much
higher
data
rate
compared
to
the
LF
and
HF
systems.
However,
the
UHF
system
does
not
work
very
well
in
the
presence
of
metallic
objects,
water
and
the
human
body,
compared
to
the
LF
system.
Principle
of
RFID
Consider
a
coil
made
of
copper
wire
through
which
alternating
current
is
flowing.
The
coil
offers
impedance
to
the
source
and
a
voltage
develops
across
its
terminals.
It
is
possible
to
increase
the
voltage
by
connecting
a
capacitor
in
parallel
with
the
coil.
Let
us
call
this
the
“primary”
coil.
Now
we
bring
in
another
coil,
called
the
“secondary”
coil,
close
to
the
first.
Due
to
electromagnetic
induction,
voltage
appears
across
the
terminals
of
the
secondary
coil.
The
amplitude
of
the
voltage
depends
on
the
size,
shape,
location
and
orientation
of
the
secondary
coil.
If
we
connect
a
resistor
(also
known
as
a
load)
across
the
terminals
of
the
secondary
coil,
current
flows
through
it.
The
strength
of
the
current
flowing
through
the
secondary
coil
depends
on
the
load.
The
interesting
phenomenon
is
that
the
current
flowing
in
the
secondary
coil
induces
a
voltage
back
into
the
primary
coil,
which
is
proportional
to
its
strength.
The
induced
voltage,
also
known
as
back
emf
(electromotive
force),
can
easily
be
sensed
by
using
suitable
electronics.
Therefore,
by
observing
the
voltage
on
the
primary,
it
is
possible
to
estimate
what
is
connected
to
the
secondary
coil.
Q3B
IEEE
802.11,
commonly
known
as
Wi-Fi,
is
a
set
of
standards
for
wireless
local
area
networking
(WLAN)
technology.
It
defines
protocols
and
specifications
for
implementing
wireless
communication
between
devices,
allowing
them
to
connect
to
a
network
and
communicate
with
each
other
without
the
need
for
physical
cables.
Wi-Fi
has
become
ubiquitous
in
modern
computing
and
communication
devices,
enabling
wireless
internet
access,
local
file
sharing,
and
IoT
connectivity.
Key
features
of
IEEE
802.11/Wi-Fi
include:
1.
**Multiple
Standards**:
The
IEEE
802.11
family
encompasses
various
standards,
such
as
802.11a,
802.11b,
802.11g,
802.11n,
802.11ac,
and
802.11ax
(Wi-Fi
6).
Each
standard
operates
on
different
frequencies
and
provides
different
data
rates,
ranges,
and
capabilities.
2.
**Frequency
Bands**:
Wi-Fi
operates
in
the
2.4
GHz
and
5
GHz
frequency
bands.
These
bands
offer
different
advantages
and
limitations
in
terms
of
range,
data
throughput,
and
interference.
3.
**Modulation
Techniques**:
Wi-Fi
standards
use
different
modulation
techniques,
such
as
OFDM
(Orthogonal
Frequency
Division
Multiplexing),
to
improve
data
transmission
efficiency
and
robustness
in
noisy
environments.
4.
**Security
Features**:
IEEE
802.11
standards
include
various
security
mechanisms,
such
as
WPA2
(Wi-Fi
Protected
Access
2)
and
WPA3,
to
encrypt
data
and
authenticate
devices,
protecting
Wi-Fi
networks
from
unauthorized
access
and
data
breaches.
5.
**Quality
of
Service
(QoS)**:
Wi-Fi
standards
support
QoS
mechanisms
to
prioritize
certain
types
of
traffic,
ensuring
reliable
transmission
of
time-sensitive
data
such
as
voice
and
video
streams.
6.
**Backward
Compatibility**:
Newer
Wi-Fi
standards
are
backward
compatible
with
older
standards,
allowing
devices
supporting
different
Wi-Fi
versions
to
communicate
with
each
other.
Now,
let's
discuss
the
application
of
IEEE
802.11/Wi-Fi
in
IoT:
1.
**Device
Connectivity**:
Wi-Fi
provides
a
convenient
and
widely
adopted
method
for
connecting
IoT
devices
to
a
network
without
the
need
for
physical
cables.
IoT
devices,
such
as
smart
home
appliances,
wearables,
and
environmental
sensors,
can
communicate
with
each
other
and
with
cloud
services
over
Wi-Fi
networks.
2.
**Data
Transmission**:
Wi-Fi
offers
sufficient
data
throughput
for
transmitting
sensor
data,
monitoring
information,
and
control
commands
between
IoT
devices
and
backend
servers.
This
enables
real-time
monitoring,
analysis,
and
control
of
IoT
systems.
3.
**Interoperability**:
Wi-Fi's
widespread
adoption
and
compatibility
with
various
devices
make
it
suitable
for
IoT
deployments
involving
heterogeneous
devices
from
different
manufacturers.
This
facilitates
interoperability
and
integration
within
IoT
ecosystems.
4.
**Home
and
Industrial
Automation**:
Wi-Fi-enabled
IoT
devices
are
commonly
used
in
home
automation
systems,
allowing
users
to
remotely
control
lighting,
HVAC
systems,
security
cameras,
and
other
smart
devices.
In
industrial
settings,
Wi-Fi-enabled
sensors
and
actuators
enable
process
monitoring,
predictive
maintenance,
and
automation
of
manufacturing
processes.
5.
**Scalability**:
Wi-Fi
networks
can
accommodate
a
large
number
of
IoT
devices,
making
them
suitable
for
deployments
ranging
from
smart
homes
to
smart
cities.
With
advancements
in
Wi-Fi
technology
(e.g.,
Wi-Fi
6),
the
capacity
and
efficiency
of
Wi-Fi
networks
continue
to
improve,
supporting
the
scalability
requirements
of
IoT
applications.
Overall,
IEEE
802.11/Wi-Fi
plays
a
crucial
role
in
enabling
wireless
connectivity
and
communication
in
IoT
deployments,
facilitating
seamless
integration,
data
exchange,
and
control
of
IoT
devices
across
various
domains
and
applications.
Q3C
Analysis
of
Bluetooth
Standard
in
Connection
with
IoT
Network
Architecture
Requirements:
Scale:
Bluetooth:
Bluetooth
technology
supports
up
to
7
active
connections
per
device
in
the
classic
Bluetooth
specification
and
up
to
thousands
of
devices
in
a
Bluetooth
Low
Energy
(BLE)
mesh
network.
IoT
Requirement:
While
BLE
mesh
networks
can
support
a
large
number
of
devices,
they
may
face
scalability
challenges
compared
to
other
protocols
like
Zigbee,
which
are
designed
specifically
for
larger-scale
deployments.
Security:
Bluetooth:
Bluetooth
offers
various
security
features,
including
encryption,
authentication,
and
pairing
mechanisms,
to
ensure
secure
communication
between
devices.
IoT
Requirement:
Security
is
crucial
in
IoT
deployments
to
protect
sensitive
data
and
prevent
unauthorized
access.
Bluetooth's
security
features
make
it
suitable
for
IoT
applications
requiring
secure
communication.
Constrained
Devices
and
Networks:
Bluetooth:
Bluetooth
Low
Energy
(BLE)
is
optimized
for
low-power
devices
and
supports
efficient
communication
in
resource-constrained
environments.
IoT
Requirement:
IoT
devices
often
have
limited
power,
CPU,
and
memory
resources.
Bluetooth's
low-power
capabilities
make
it
suitable
for
IoT
applications
where
energy
efficiency
is
a
priority.
Data:
Bluetooth:
Bluetooth
supports
data
transmission
rates
ranging
from
a
few
kilobits
per
second
to
several
megabits
per
second,
depending
on
the
version
and
mode
of
operation.
IoT
Requirement:
IoT
applications
generate
varying
amounts
of
data,
from
small
sensor
readings
to
high-definition
video
streams.
Bluetooth's
data
transmission
rates
may
be
sufficient
for
some
IoT
applications
but
may
be
insufficient
for
others
requiring
higher
data
throughput.
Legacy
Device
Support:
Bluetooth:
Bluetooth
technology
supports
backward
compatibility
with
older
versions,
ensuring
interoperability
with
legacy
devices.
IoT
Requirement:
IoT
networks
may
need
to
support
legacy
devices
with
older
Bluetooth
versions
or
other
communication
protocols.
Bluetooth's
backward
compatibility
makes
it
suitable
for
IoT
deployments
requiring
legacy
device
support.
Conclusion
for
Bluetooth
Standard
in
IoT:
Bluetooth
technology,
particularly
Bluetooth
Low
Energy
(BLE),
offers
several
advantages
for
IoT
applications,
including
low
power
consumption,
security
features,
and
compatibility
with
legacy
devices.
However,
it
may
face
challenges
in
scalability
and
data
throughput
compared
to
other
protocols
like
Zigbee.
Therefore,
while
Bluetooth
is
suitable
for
certain
IoT
deployments,
its
suitability
depends
on
specific
application
requirements
such
as
scale,
security,
and
data
transmission
rates.
Q4D
Analysis
of
LTE
(4G)
Standard
in
Connection
with
IoT
Network
Architecture
Requirements:
Scale:
LTE
(4G):
LTE
networks
can
support
millions
of
connected
devices
per
square
kilometer,
making
them
suitable
for
large-scale
IoT
deployments.
IoT
Requirement:
LTE's
scalability
makes
it
suitable
for
IoT
applications
requiring
connectivity
over
large
geographic
areas
or
with
a
high
density
of
devices.
Security:
LTE
(4G):
LTE
networks
provide
robust
security
features,
including
encryption,
authentication,
and
secure
communication
protocols,
to
protect
data
transmission.
IoT
Requirement:
Security
is
critical
in
IoT
deployments
to
safeguard
sensitive
data
and
prevent
cyber-attacks.
LTE's
security
features
make
it
suitable
for
applications
requiring
secure
communication.
Constrained
Devices
and
Networks:
LTE
(4G):
LTE
networks
are
designed
to
support
a
wide
range
of
devices,
including
those
with
limited
power
and
processing
capabilities.
IoT
Requirement:
IoT
devices
often
have
constrained
resources,
such
as
low
power
and
memory.
LTE's
support
for
resource-constrained
devices
makes
it
suitable
for
IoT
applications
requiring
connectivity
in
diverse
environments.
Data:
LTE
(4G):
LTE
networks
offer
high
data
transmission
rates,
ranging
from
tens
of
megabits
per
second
to
several
hundred
megabits
per
second,
depending
on
network
conditions.
IoT
Requirement:
IoT
applications
generate
varying
amounts
of
data,
from
small
sensor
readings
to
high-definition
video
streams.
LTE's
high
data
throughput
makes
it
suitable
for
IoT
applications
requiring
real-time
data
transmission
or
large
data
transfers.
Legacy
Device
Support:
LTE
(4G):
LTE
networks
support
backward
compatibility
with
older
generations
of
cellular
technologies,
ensuring
interoperability
with
legacy
devices.
IoT
Requirement:
IoT
deployments
may
include
legacy
devices
requiring
connectivity
over
cellular
networks.
LTE's
backward
compatibility
makes
it
suitable
for
IoT
applications
requiring
support
for
legacy
devices.
Conclusion
for
LTE
(4G)
Standard
in
IoT:
LTE
technology
offers
several
advantages
for
IoT
applications,
including
scalability,
security,
support
for
constrained
devices,
high
data
throughput,
and
backward
compatibility.
LTE
is
suitable
for
a
wide
range
of
IoT
deployments,
including
those
requiring
connectivity
over
large
geographic
areas,
real-time
data
transmission,
and
support
for
legacy
devices.
Therefore,
LTE
is
considered
a
good
protocol
for
IoT,
especially
for
applications
with
stringent
requirements
for
scalability,
security,
and
data
transmission
rates.
